#!/bin/bash
# Script Bash pour g√©rer K.Kits avec Docker
# Usage: ./docker.sh <command>

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

show_help() {
    echo -e "${CYAN}===================================${NC}"
    echo -e "${CYAN}K.Kits - Commandes Docker${NC}"
    echo -e "${CYAN}===================================${NC}"
    echo ""
    echo -e "${YELLOW}D√©veloppement:${NC}"
    echo "  ./docker.sh dev          - Lancer services dev (DB + Redis)"
    echo "  ./docker.sh up           - Lancer tous les services"
    echo "  ./docker.sh down         - Arr√™ter tous les services"
    echo "  ./docker.sh restart      - Red√©marrer les services"
    echo "  ./docker.sh logs         - Voir les logs"
    echo ""
    echo -e "${YELLOW}Build:${NC}"
    echo "  ./docker.sh build        - Build l'image Docker"
    echo "  ./docker.sh rebuild      - Rebuild sans cache"
    echo ""
    echo -e "${YELLOW}Base de donn√©es:${NC}"
    echo "  ./docker.sh migrate      - Appliquer les migrations"
    echo "  ./docker.sh studio       - Ouvrir Prisma Studio"
    echo "  ./docker.sh backup       - Backup de la DB"
    echo ""
    echo -e "${YELLOW}Production:${NC}"
    echo "  ./docker.sh prod         - Lancer en mode production"
    echo ""
    echo -e "${YELLOW}Nettoyage:${NC}"
    echo "  ./docker.sh clean        - Nettoyer conteneurs et volumes"
    echo "  ./docker.sh clean-all    - Nettoyer tout (images incluses)"
    echo ""
    echo -e "${YELLOW}Utilitaires:${NC}"
    echo "  ./docker.sh status       - V√©rifier l'√©tat des services"
    echo "  ./docker.sh shell        - Acc√©der au shell de l'app"
    echo ""
}

start_dev() {
    echo -e "${GREEN}üöÄ D√©marrage des services de d√©veloppement...${NC}"
    docker-compose -f docker-compose.dev.yml up -d
    echo -e "${GREEN}‚úÖ Services dev d√©marr√©s (PostgreSQL + Redis)${NC}"
    echo -e "${YELLOW}üìù Lancer 'pnpm dev' pour d√©marrer l'app${NC}"
}

start_all() {
    echo -e "${GREEN}üöÄ D√©marrage de tous les services...${NC}"
    docker-compose up -d
    echo -e "${GREEN}‚úÖ Tous les services d√©marr√©s${NC}"
    echo -e "${CYAN}üåê Application: http://localhost:3000${NC}"
}

stop_all() {
    echo -e "${YELLOW}üõë Arr√™t des services...${NC}"
    docker-compose down
    echo -e "${GREEN}‚úÖ Services arr√™t√©s${NC}"
}

restart_all() {
    echo -e "${YELLOW}üîÑ Red√©marrage des services...${NC}"
    docker-compose restart
    echo -e "${GREEN}‚úÖ Services red√©marr√©s${NC}"
}

show_logs() {
    echo -e "${CYAN}üìã Affichage des logs...${NC}"
    docker-compose logs -f
}

build_image() {
    echo -e "${YELLOW}üî® Build de l'image Docker...${NC}"
    docker-compose build
    echo -e "${GREEN}‚úÖ Image build√©e${NC}"
}

rebuild_image() {
    echo -e "${YELLOW}üî® Rebuild de l'image sans cache...${NC}"
    docker-compose build --no-cache
    echo -e "${GREEN}‚úÖ Image rebuild√©e${NC}"
}

run_migrate() {
    echo -e "${YELLOW}üîÑ Application des migrations Prisma...${NC}"
    docker-compose exec app npx prisma migrate deploy
    echo -e "${GREEN}‚úÖ Migrations appliqu√©es${NC}"
}

open_studio() {
    echo -e "${CYAN}üé® Ouverture de Prisma Studio...${NC}"
    docker-compose exec app npx prisma studio
}

backup_database() {
    timestamp=$(date +%Y%m%d_%H%M%S)
    filename="backup_${timestamp}.sql"
    echo -e "${YELLOW}üíæ Cr√©ation du backup...${NC}"
    docker-compose exec postgres pg_dump -U k_kits_user k_kits_db > "$filename"
    echo -e "${GREEN}‚úÖ Backup cr√©√©: $filename${NC}"
}

start_prod() {
    echo -e "${GREEN}üöÄ D√©marrage en mode production...${NC}"
    docker-compose -f docker-compose.prod.yml up -d
    echo -e "${GREEN}‚úÖ Production d√©marr√©e${NC}"
}

clean_all() {
    echo -e "${YELLOW}üßπ Nettoyage des conteneurs et volumes...${NC}"
    docker-compose down -v
    echo -e "${GREEN}‚úÖ Conteneurs et volumes supprim√©s${NC}"
}

clean_everything() {
    echo -e "${RED}üßπ Nettoyage complet...${NC}"
    read -p "‚ö†Ô∏è  Cela supprimera TOUT (conteneurs, volumes, images). Continuer? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker-compose down -v --rmi all
        docker system prune -a --volumes -f
        echo -e "${GREEN}‚úÖ Nettoyage complet effectu√©${NC}"
    else
        echo -e "${YELLOW}‚ùå Annul√©${NC}"
    fi
}

show_status() {
    echo -e "${CYAN}üìä √âtat des services:${NC}"
    docker-compose ps
    echo ""
    echo -e "${CYAN}Sant√© des services:${NC}"
    
    # Test PostgreSQL
    if docker-compose exec postgres pg_isready -U k_kits_user > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ PostgreSQL: OK${NC}"
    else
        echo -e "${RED}‚ùå PostgreSQL: Non disponible${NC}"
    fi
    
    # Test Redis
    if docker-compose exec redis redis-cli ping > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Redis: OK${NC}"
    else
        echo -e "${RED}‚ùå Redis: Non disponible${NC}"
    fi
}

open_shell() {
    echo -e "${CYAN}üêö Ouverture du shell de l'application...${NC}"
    docker-compose exec app sh
}

# Router les commandes
case "${1:-help}" in
    help)
        show_help
        ;;
    dev)
        start_dev
        ;;
    up)
        start_all
        ;;
    down)
        stop_all
        ;;
    restart)
        restart_all
        ;;
    logs)
        show_logs
        ;;
    build)
        build_image
        ;;
    rebuild)
        rebuild_image
        ;;
    migrate)
        run_migrate
        ;;
    studio)
        open_studio
        ;;
    backup)
        backup_database
        ;;
    prod)
        start_prod
        ;;
    clean)
        clean_all
        ;;
    clean-all)
        clean_everything
        ;;
    status)
        show_status
        ;;
    shell)
        open_shell
        ;;
    *)
        echo -e "${RED}‚ùå Commande inconnue: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
