# Script PowerShell pour g√©rer K.Kits avec Docker
# Usage: .\docker.ps1 <command>

param(
    [Parameter(Position=0)]
    [string]$Command = "help"
)

function Show-Help {
    Write-Host "===================================" -ForegroundColor Cyan
    Write-Host "K.Kits - Commandes Docker" -ForegroundColor Cyan
    Write-Host "===================================" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "D√©veloppement:" -ForegroundColor Yellow
    Write-Host "  .\docker.ps1 dev          - Lancer services dev (DB + Redis)"
    Write-Host "  .\docker.ps1 up           - Lancer tous les services"
    Write-Host "  .\docker.ps1 down         - Arr√™ter tous les services"
    Write-Host "  .\docker.ps1 restart      - Red√©marrer les services"
    Write-Host "  .\docker.ps1 logs         - Voir les logs"
    Write-Host ""
    Write-Host "Build:" -ForegroundColor Yellow
    Write-Host "  .\docker.ps1 build        - Build l'image Docker"
    Write-Host "  .\docker.ps1 rebuild      - Rebuild sans cache"
    Write-Host ""
    Write-Host "Base de donn√©es:" -ForegroundColor Yellow
    Write-Host "  .\docker.ps1 migrate      - Appliquer les migrations"
    Write-Host "  .\docker.ps1 studio       - Ouvrir Prisma Studio"
    Write-Host "  .\docker.ps1 backup       - Backup de la DB"
    Write-Host ""
    Write-Host "Production:" -ForegroundColor Yellow
    Write-Host "  .\docker.ps1 prod         - Lancer en mode production"
    Write-Host ""
    Write-Host "Nettoyage:" -ForegroundColor Yellow
    Write-Host "  .\docker.ps1 clean        - Nettoyer conteneurs et volumes"
    Write-Host "  .\docker.ps1 clean-all    - Nettoyer tout (images incluses)"
    Write-Host ""
    Write-Host "Utilitaires:" -ForegroundColor Yellow
    Write-Host "  .\docker.ps1 status       - V√©rifier l'√©tat des services"
    Write-Host "  .\docker.ps1 shell        - Acc√©der au shell de l'app"
    Write-Host ""
}

function Start-Dev {
    Write-Host "üöÄ D√©marrage des services de d√©veloppement..." -ForegroundColor Green
    docker-compose -f docker-compose.dev.yml up -d
    Write-Host "‚úÖ Services dev d√©marr√©s (PostgreSQL + Redis)" -ForegroundColor Green
    Write-Host "üìù Lancer 'pnpm dev' pour d√©marrer l'app" -ForegroundColor Yellow
}

function Start-All {
    Write-Host "üöÄ D√©marrage de tous les services..." -ForegroundColor Green
    docker-compose up -d
    Write-Host "‚úÖ Tous les services d√©marr√©s" -ForegroundColor Green
    Write-Host "üåê Application: http://localhost:3000" -ForegroundColor Cyan
}

function Stop-All {
    Write-Host "üõë Arr√™t des services..." -ForegroundColor Yellow
    docker-compose down
    Write-Host "‚úÖ Services arr√™t√©s" -ForegroundColor Green
}

function Restart-All {
    Write-Host "üîÑ Red√©marrage des services..." -ForegroundColor Yellow
    docker-compose restart
    Write-Host "‚úÖ Services red√©marr√©s" -ForegroundColor Green
}

function Show-Logs {
    Write-Host "üìã Affichage des logs..." -ForegroundColor Cyan
    docker-compose logs -f
}

function Build-Image {
    Write-Host "üî® Build de l'image Docker..." -ForegroundColor Yellow
    docker-compose build
    Write-Host "‚úÖ Image build√©e" -ForegroundColor Green
}

function Rebuild-Image {
    Write-Host "üî® Rebuild de l'image sans cache..." -ForegroundColor Yellow
    docker-compose build --no-cache
    Write-Host "‚úÖ Image rebuild√©e" -ForegroundColor Green
}

function Run-Migrate {
    Write-Host "üîÑ Application des migrations Prisma..." -ForegroundColor Yellow
    docker-compose exec app npx prisma migrate deploy
    Write-Host "‚úÖ Migrations appliqu√©es" -ForegroundColor Green
}

function Open-Studio {
    Write-Host "üé® Ouverture de Prisma Studio..." -ForegroundColor Cyan
    docker-compose exec app npx prisma studio
}

function Backup-Database {
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $filename = "backup_$timestamp.sql"
    Write-Host "üíæ Cr√©ation du backup..." -ForegroundColor Yellow
    docker-compose exec postgres pg_dump -U k_kits_user k_kits_db > $filename
    Write-Host "‚úÖ Backup cr√©√©: $filename" -ForegroundColor Green
}

function Start-Prod {
    Write-Host "üöÄ D√©marrage en mode production..." -ForegroundColor Green
    docker-compose -f docker-compose.prod.yml up -d
    Write-Host "‚úÖ Production d√©marr√©e" -ForegroundColor Green
}

function Clean-All {
    Write-Host "üßπ Nettoyage des conteneurs et volumes..." -ForegroundColor Yellow
    docker-compose down -v
    Write-Host "‚úÖ Conteneurs et volumes supprim√©s" -ForegroundColor Green
}

function Clean-Everything {
    Write-Host "üßπ Nettoyage complet..." -ForegroundColor Red
    $confirm = Read-Host "‚ö†Ô∏è  Cela supprimera TOUT (conteneurs, volumes, images). Continuer? (y/N)"
    if ($confirm -eq 'y' -or $confirm -eq 'Y') {
        docker-compose down -v --rmi all
        docker system prune -a --volumes -f
        Write-Host "‚úÖ Nettoyage complet effectu√©" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Annul√©" -ForegroundColor Yellow
    }
}

function Show-Status {
    Write-Host "üìä √âtat des services:" -ForegroundColor Cyan
    docker-compose ps
    Write-Host ""
    Write-Host "Sant√© des services:" -ForegroundColor Cyan
    
    # Test PostgreSQL
    $pgTest = docker-compose exec postgres pg_isready -U k_kits_user 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ PostgreSQL: OK" -ForegroundColor Green
    } else {
        Write-Host "‚ùå PostgreSQL: Non disponible" -ForegroundColor Red
    }
    
    # Test Redis
    $redisTest = docker-compose exec redis redis-cli ping 2>&1
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Redis: OK" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Redis: Non disponible" -ForegroundColor Red
    }
}

function Open-Shell {
    Write-Host "üêö Ouverture du shell de l'application..." -ForegroundColor Cyan
    docker-compose exec app sh
}

# Router les commandes
switch ($Command.ToLower()) {
    "help" { Show-Help }
    "dev" { Start-Dev }
    "up" { Start-All }
    "down" { Stop-All }
    "restart" { Restart-All }
    "logs" { Show-Logs }
    "build" { Build-Image }
    "rebuild" { Rebuild-Image }
    "migrate" { Run-Migrate }
    "studio" { Open-Studio }
    "backup" { Backup-Database }
    "prod" { Start-Prod }
    "clean" { Clean-All }
    "clean-all" { Clean-Everything }
    "status" { Show-Status }
    "shell" { Open-Shell }
    default {
        Write-Host "‚ùå Commande inconnue: $Command" -ForegroundColor Red
        Write-Host ""
        Show-Help
    }
}
