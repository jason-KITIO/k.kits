generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// üîê AUTHENTIFICATION & S√âCURIT√â
// ========================================

/// Utilisateur du syst√®me avec authentification compl√®te
/// Peut appartenir √† plusieurs organisations (multi-tenant)
model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  username                String?   @unique
  passwordHash            String
  firstName               String?
  lastName                String?
  phone                   String?   @unique
  profileImageUrl         String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  lastSignInAt            DateTime?
  emailVerified           Boolean   @default(false)
  phoneVerified           Boolean   @default(false)
  twoFactorEnabled        Boolean   @default(false)
  banned                  Boolean   @default(false)
  resetToken              String?
  resetTokenExpiry        DateTime?
  verificationToken       String?
  verificationTokenExpiry DateTime?
  settings                Json?     /// Param√®tres utilisateur (JSON)

  // üîí Relations authentification & s√©curit√©
  sessions      UserSession[]
  twoFactorAuth TwoFactorAuth?
  loginAttempts LoginAttempt[]
  auditLogs     AuditLog[]

  // üè¢ Relations organisationnelles (Multi-tenant)
  roles               UserRole[] /// R√¥les dans diff√©rentes organisations
  organizationMembers OrganizationMember[] /// Appartenance aux organisations

  // üì¶ Relations m√©tier - Gestion de stock
  stockMovements         StockMovement[] /// Mouvements de stock cr√©√©s
  stockMovementRequests  StockMovementRequest[] @relation("RequestedBy") /// Requ√™tes cr√©√©es
  approvedRequests       StockMovementRequest[] @relation("ApprovedBy") /// Requ√™tes approuv√©es
  rejectedRequests       StockMovementRequest[] @relation("RejectedBy") /// Requ√™tes rejet√©es
  employeeStocks         EmployeeStock[] @relation("EmployeeStocks") /// Stocks individuels d'employ√©
  stockReturns           StockReturn[] @relation("ReturnEmployee") /// Retours de produits
  sales                  Sale[] /// Ventes effectu√©es
  managedWarehouses      Warehouse[] /// Entrep√¥ts sous gestion
  managedStores          Store[] /// Boutiques sous gestion
  purchaseOrders         PurchaseOrder[] /// Commandes d'achat cr√©√©es
  notifications          Notification[] /// Notifications re√ßues

  @@map("users")
}

/// Sessions utilisateur pour la gestion des connexions
model UserSession {
  id           String    @id @default(cuid())
  userId       String
  sessionToken String    @unique
  refreshToken String?   @unique
  deviceInfo   String?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime  @default(now())
  lastActiveAt DateTime?
  expiresAt    DateTime?
  active       Boolean   @default(true)
  location     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("user_sessions")
}

/// Authentification √† deux facteurs
model TwoFactorAuth {
  id          String    @id @default(cuid())
  userId      String    @unique
  secret      String
  enabled     Boolean   @default(false)
  backupCodes String?
  enabledAt   DateTime?
  lastUsedAt  DateTime?
  method      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("two_factor_auth")
}

/// Tentatives de connexion pour s√©curit√©
model LoginAttempt {
  id            String   @id @default(cuid())
  email         String
  ipAddress     String?
  userAgent     String?
  successful    Boolean
  failureReason String?
  attemptedAt   DateTime @default(now())
  location      String?

  user User? @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Cascade)

  @@map("login_attempts")
}

// ========================================
// üè¢ GESTION ORGANISATIONNELLE (MULTI-TENANT)
// ========================================

/// üè¢ ORGANISATION (TENANT) - Entreprise cliente du SaaS
/// Une organisation repr√©sente une entreprise compl√®te avec ses boutiques, entrep√¥ts, utilisateurs et donn√©es
/// Architecture: Organization > Stores > Products/Sales/Stocks
model Organization {
  id          String   @id @default(cuid())
  name        String /// Nom de l'entreprise (ex: "Boulangerie Martin")
  description String? /// Description de l'activit√©
  domain      String? /// Sous-domaine personnalis√© (ex: martin.stockpro.com)
  logo        String? /// URL du logo de l'entreprise
  address     String? /// Adresse principale
  phone       String? /// T√©l√©phone principal
  email       String? /// Email de contact
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String? /// ID de l'utilisateur "Auteur" (celui qui a cr√©√© l'org)
  settings    Json?    /// Param√®tres de l'organisation (JSON)

  // üë• Relations utilisateurs & s√©curit√©
  members          OrganizationMember[] /// Tous les membres de l'organisation
  invitations      Invitation[] /// Invitations en cours
  UserRole         UserRole[] /// Attribution des r√¥les
  OrganizationRole OrganizationRole[] /// R√¥les disponibles dans cette org

  // üè™ Relations infrastructure (Multi-points de vente & Multi-entrep√¥ts)
  warehouses Warehouse[] /// Entrep√¥ts de stockage
  stores     Store[] /// Boutiques/points de vente

  // üì¶ Relations catalogue & inventaire (Partag√©s entre toutes les boutiques)
  products   Product[] /// Catalogue produits global
  categories Category[] /// Cat√©gories de produits
  suppliers  Supplier[] /// Fournisseurs
  customers  Customer[] /// Base clients (peut √™tre globale ou par boutique)

  // üí∞ Relations transactions (Agr√©g√©es pour dashboard global)
  sales                 Sale[] /// Toutes les ventes de l'organisation
  purchaseOrders        PurchaseOrder[] /// Commandes d'achat
  stockMovements        StockMovement[] /// Mouvements de stock
  stocks                Stock[] /// √âtat des stocks
  notifications         Notification[] /// Notifications syst√®me
  employeeStocks        EmployeeStock[] @relation("EmployeeStockOrg") /// Stocks employ√©s
  stockMovementRequests StockMovementRequest[] @relation("RequestOrg") /// Requ√™tes de mouvement
  stockReturns          StockReturn[] @relation("ReturnOrg") /// Retours produits

  @@map("organizations")
}

/// üë§ MEMBRE D'ORGANISATION - Liaison User ‚Üî Organization avec r√¥le
/// Un utilisateur peut √™tre membre de plusieurs organisations avec des r√¥les diff√©rents
model OrganizationMember {
  id             String    @id @default(cuid())
  userId         String
  organizationId String
  joinedAt       DateTime  @default(now())
  leftAt         DateTime? /// Date de sortie si applicable
  active         Boolean   @default(true)
  invitedBy      String? /// Qui a invit√© cet utilisateur
  roleId         String /// R√¥le principal dans cette organisation
  createdAt      DateTime  @default(now())

  role         Role         @relation(fields: [roleId], references: [id])
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, organizationId]) /// Un utilisateur = un seul membership par organisation
  @@map("organization_members")
}

/// üìß INVITATIONS - Inviter de nouveaux utilisateurs dans l'organisation
model Invitation {
  id             String   @id @default(cuid())
  organizationId String
  email          String /// Email de la personne invit√©e
  roleId         String /// R√¥le qui sera assign√©
  invitedBy      String? /// Qui a envoy√© l'invitation
  createdAt      DateTime @default(now())
  expiresAt      DateTime /// Date d'expiration
  status         String /// PENDING, ACCEPTED, DECLINED, EXPIRED
  token          String   @unique /// Token s√©curis√© pour accepter l'invitation

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role         Role         @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("invitations")
}

// ========================================
// üîë SYST√àME DE R√îLES & PERMISSIONS (GRANULAIRE)
// ========================================

/// üé≠ R√îLES - D√©finissent les responsabilit√©s et acc√®s
/// Exemples: "Auteur", "Admin G√©n√©ral", "G√©rant Boutique", "Vendeur", "Magasinier"
model Role {
  id          String   @id @default(cuid())
  name        String   @unique /// Ex: "Gestionnaire Entrep√¥t", "Vendeur Boutique"
  description String? /// Description d√©taill√©e du r√¥le
  color       String? /// Couleur pour l'UI (ex: #FF5733)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations vers les utilisateurs
  userRoles          UserRole[] /// Attribution aux utilisateurs
  OrganizationMember OrganizationMember[] /// Membres avec ce r√¥le

  // Relations permissions
  rolePermissions  RolePermission[] /// Permissions accord√©es √† ce r√¥le
  OrganizationRole OrganizationRole[] /// Disponibilit√© dans les organisations

  // Autres relations
  Invitation Invitation[] /// Invitations avec ce r√¥le

  @@map("roles")
}

/// üîê PERMISSIONS - Actions autoris√©es dans le syst√®me
/// Format: "resource.action.scope" (ex: "stock.read.all", "sale.create.specific")
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique /// Ex: "stock.create", "sale.read.all", "product.manage"
  resource    String /// Ex: "stock", "product", "sale", "user"
  action      String /// Ex: "create", "read", "update", "delete", "manage"
  description String? /// Description de ce que permet cette permission
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())

  rolePermissions RolePermission[] /// Attribution aux r√¥les

  @@map("permissions")
}

/// üîó ATTRIBUTION R√îLE ‚Üî UTILISATEUR ‚Üî ORGANISATION
/// D√©finit quel utilisateur a quel r√¥le dans quelle organisation (+ scope optionnel)
model UserRole {
  id             String    @id @default(cuid())
  userId         String
  roleId         String
  organizationId String /// Dans quelle organisation ce r√¥le s'applique
  storeId        String? /// NOUVEAU: Si r√¥le limit√© √† une boutique sp√©cifique
  assignedAt     DateTime  @default(now())
  expiresAt      DateTime? /// R√¥le temporaire possible
  assignedBy     String? /// Qui a assign√© ce r√¥le
  active         Boolean   @default(true)

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role         Role         @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  store        Store?       @relation(fields: [storeId], references: [id]) /// NOUVEAU: Limitation √† une boutique

  @@unique([userId, roleId, organizationId, storeId]) /// Un utilisateur ne peut avoir le m√™me r√¥le qu'une fois par org/store
  @@map("user_roles")
}

/// üîë PERMISSIONS PAR R√îLE - Quelles permissions a chaque r√¥le
model RolePermission {
  id           String   @id @default(cuid())
  roleId       String
  permissionId String
  assignedAt   DateTime @default(now())
  assignedBy   String? /// Qui a accord√© cette permission
  active       Boolean  @default(true)

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([roleId, permissionId]) /// Une permission par r√¥le maximum
  @@map("role_permissions")
}

/// üè¢ R√îLES DISPONIBLES PAR ORGANISATION - Customisation par tenant
/// Permet √† chaque organisation de choisir quels r√¥les sont disponibles
model OrganizationRole {
  id             String @id @default(cuid())
  roleId         String
  organizationId String

  role         Role         @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([roleId, organizationId]) /// Un r√¥le ne peut √™tre ajout√© qu'une fois par organisation
  @@map("organization_roles")
}

// ========================================
// üì¶ CATALOGUE & GESTION PRODUITS
// ========================================

/// üìÇ CAT√âGORIES - Hi√©rarchie des produits (arbre)
/// Permet d'organiser le catalogue (ex: Alimentaire > Boissons > Sodas)
model Category {
  id             String   @id @default(cuid())
  name           String /// Nom de la cat√©gorie
  description    String? /// Description optionnelle
  parentId       String? /// Cat√©gorie parent (pour hi√©rarchie)
  organizationId String /// Appartient √† quelle organisation
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  parent        Category?    @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subCategories Category[]   @relation("CategoryHierarchy") /// Sous-cat√©gories
  products      Product[] /// Produits dans cette cat√©gorie

  @@map("categories")
}

/// üè≠ FOURNISSEURS - Partenaires commerciaux
model Supplier {
  id             String   @id @default(cuid())
  name           String /// Nom du fournisseur
  email          String? /// Contact email
  phone          String? /// T√©l√©phone
  address        String? /// Adresse compl√®te
  contactPerson  String? /// Nom du contact principal
  taxNumber      String? /// Num√©ro fiscal
  paymentTerms   String? /// Conditions de paiement (ex: "30 jours net")
  notes          String? /// Notes additionnelles
  organizationId String /// Appartient √† quelle organisation
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  products       Product[] /// Produits fournis par ce fournisseur
  purchaseOrders PurchaseOrder[] /// Commandes pass√©es √† ce fournisseur

  @@map("suppliers")
}

/// üì¶ PRODUIT - Article du catalogue
/// Chaque produit appartient √† une organisation et peut √™tre vendu dans toutes ses boutiques
model Product {
  id             String   @id @default(cuid())
  sku            String /// Code produit unique dans l'organisation
  name           String /// Nom du produit
  description    String? /// Description d√©taill√©e
  categoryId     String? /// Cat√©gorie du produit
  supplierId     String? /// Fournisseur principal
  color          String /// Pour la couleur 
  unitPrice      Decimal  @db.Decimal(10, 2) /// Prix de vente HT
  costPrice      Decimal  @db.Decimal(10, 2) /// Prix d'achat/co√ªt de revient
  weight         Decimal? @db.Decimal(8, 3) /// Poids en kg
  dimensions     String? /// Format: "L x l x H" en cm
  minStock       Int      @default(0) /// Seuil d'alerte stock minimum
  organizationId String /// Appartient √† quelle organisation
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  category     Category?    @relation(fields: [categoryId], references: [id])
  supplier     Supplier?    @relation(fields: [supplierId], references: [id])

  // Relations stock et mouvements
  stocks                Stock[] /// Stocks par localisation (boutiques/entrep√¥ts)
  stockMovements        StockMovement[] /// Historique des mouvements
  saleItems             SaleItem[] /// Lignes de vente
  purchaseOrderItems    PurchaseOrderItem[] /// Lignes de commande fournisseur
  employeeStocks        EmployeeStock[] @relation("EmployeeStockProducts") /// Stocks employ√©s
  stockMovementRequests StockMovementRequest[] @relation("RequestProduct") /// Requ√™tes de mouvement
  stockReturns          StockReturn[] @relation("ReturnProduct") /// Retours produits

  @@unique([sku, organizationId]) /// SKU unique par organisation
  @@map("products")
}

// ========================================
// üè™ INFRASTRUCTURE PHYSIQUE & LOGIQUE
// ========================================

/// üè™ BOUTIQUE/POINT DE VENTE - Sous-entit√© d'une Organisation
/// Une organisation peut avoir plusieurs boutiques (physiques ou en ligne)
/// Chaque boutique a son dashboard d√©taill√© et ses propres stocks/ventes
model Store {
  id             String   @id @default(cuid())
  name           String /// Nom de la boutique (ex: "Boutique Centre-Ville")
  address        String? /// Adresse physique de la boutique
  phone          String? /// T√©l√©phone de la boutique
  managerId      String? /// Responsable/G√©rant de cette boutique
  type           String   @default("PHYSICAL") /// PHYSICAL, ONLINE, HYBRID
  organizationId String /// Appartient √† quelle organisation
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  manager      User?        @relation(fields: [managerId], references: [id])

  // Relations m√©tier sp√©cifiques √† cette boutique
  stocks             Stock[] /// Stocks sp√©cifiques √† cette boutique
  sales              Sale[] /// Ventes r√©alis√©es dans cette boutique
  userRoles          UserRole[] /// NOUVEAU: Utilisateurs limit√©s √† cette boutique
  stockMovementsFrom StockMovement[] @relation("FromStore") /// Mouvements depuis cette boutique
  stockMovementsTo   StockMovement[] @relation("ToStore") /// Mouvements vers cette boutique
  employeeStocks     EmployeeStock[] @relation("EmployeeStockStore") /// Stocks employ√©s

  @@map("stores")
}

/// üè≠ ENTREP√îT - Centre de stockage et distribution
/// Les entrep√¥ts alimentent les boutiques et g√®rent les stocks centralis√©s
model Warehouse {
  id             String   @id @default(cuid())
  name           String /// Nom de l'entrep√¥t (ex: "Entrep√¥t Principal")
  address        String? /// Adresse de l'entrep√¥t
  phone          String? /// Contact entrep√¥t
  managerId      String? /// Gestionnaire de l'entrep√¥t
  capacity       Int? /// Capacit√© en m3 ou nombre d'emplacements
  type           String   @default("MAIN") /// MAIN, SECONDARY, TRANSIT, RETURNS
  organizationId String /// Appartient √† quelle organisation
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  manager      User?        @relation(fields: [managerId], references: [id])

  // Relations m√©tier
  stocks             Stock[] /// Stocks dans cet entrep√¥t
  stockMovementsFrom StockMovement[] @relation("FromWarehouse") /// Mouvements depuis cet entrep√¥t
  stockMovementsTo   StockMovement[] @relation("ToWarehouse") /// Mouvements vers cet entrep√¥t
  purchaseOrders     PurchaseOrder[] /// Commandes re√ßues dans cet entrep√¥t

  @@map("warehouses")
}

// ========================================
// üìä GESTION DES STOCKS (MULTI-LOCALISATION)
// ========================================

/// üì¶ STOCK - √âtat actuel des quantit√©s par produit et localisation
/// Un m√™me produit peut avoir des stocks diff√©rents dans chaque boutique/entrep√¥t
/// Permet le suivi en temps r√©el et les alertes de stock bas
model Stock {
  id               String   @id @default(cuid())
  productId        String /// Quel produit
  warehouseId      String? /// Dans quel entrep√¥t (si applicable)
  storeId          String? /// Dans quelle boutique (si applicable)
  quantity         Int      @default(0) /// Quantit√© r√©elle disponible
  reservedQuantity Int      @default(0) /// Stock r√©serv√© (commandes non livr√©es)
  organizationId   String /// Isolation multi-tenant
  lastUpdated      DateTime @default(now()) /// Derni√®re mise √† jour

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  product      Product      @relation(fields: [productId], references: [id])
  warehouse    Warehouse?   @relation(fields: [warehouseId], references: [id])
  store        Store?       @relation(fields: [storeId], references: [id])

  @@unique([productId, warehouseId, storeId, organizationId]) /// Un stock unique par produit/localisation
  @@map("stocks")
}

/// üìà MOUVEMENT DE STOCK - Historique de tous les mouvements
/// Tra√ßabilit√© compl√®te : entr√©es, sorties, transferts, ajustements
model StockMovement {
  id              String   @id @default(cuid())
  productId       String /// Quel produit concern√©
  fromWarehouseId String? /// Entrep√¥t source (pour transferts)
  toWarehouseId   String? /// Entrep√¥t destination
  fromStoreId     String? /// Boutique source
  toStoreId       String? /// Boutique destination
  quantity        Int /// Quantit√© d√©plac√©e (+ ou -)
  type            String /// IN (entr√©e), OUT (sortie), TRANSFER, ADJUSTMENT, SALE, PURCHASE
  reference       String? /// N¬∞ commande, facture, bon de transfert
  reason          String? /// Motif d√©taill√© du mouvement
  userId          String /// Qui a effectu√© ce mouvement
  organizationId  String /// Isolation multi-tenant
  createdAt       DateTime @default(now())

  organization  Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  product       Product      @relation(fields: [productId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  fromWarehouse Warehouse?   @relation("FromWarehouse", fields: [fromWarehouseId], references: [id])
  toWarehouse   Warehouse?   @relation("ToWarehouse", fields: [toWarehouseId], references: [id])
  fromStore     Store?       @relation("FromStore", fields: [fromStoreId], references: [id])
  toStore       Store?       @relation("ToStore", fields: [toStoreId], references: [id])

  @@map("stock_movements")
}

// ========================================
// üë§ GESTION DES STOCKS EMPLOY√âS
// ========================================

/// üì¶ STOCK EMPLOY√â - Stock individuel de chaque employ√© pour la vente
/// Chaque employ√© a son propre stock plus petit destin√© √† la vente directe
model EmployeeStock {
  id               String   @id @default(cuid())
  employeeId       String   /// Quel employ√© poss√®de ce stock
  productId        String   /// Quel produit
  storeId          String   /// Dans quelle boutique
  quantity         Int      @default(0) /// Quantit√© disponible
  reservedQuantity Int      @default(0) /// Quantit√© r√©serv√©e pour mouvements
  capacity         Int      @default(100) /// Capacit√© maximale de l'employ√©
  organizationId   String   /// Isolation multi-tenant
  lastUpdated      DateTime @default(now())
  createdAt        DateTime @default(now())

  employee     User         @relation("EmployeeStocks", fields: [employeeId], references: [id])
  product      Product      @relation("EmployeeStockProducts", fields: [productId], references: [id])
  store        Store        @relation("EmployeeStockStore", fields: [storeId], references: [id])
  organization Organization @relation("EmployeeStockOrg", fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([employeeId, productId, storeId, organizationId])
  @@map("employee_stocks")
}

/// üìã REQU√äTE DE MOUVEMENT DE STOCK - Demandes de transfert avec validation hi√©rarchique
/// Les employ√©s font des requ√™tes qui doivent √™tre approuv√©es par un sup√©rieur
model StockMovementRequest {
  id              String    @id @default(cuid())
  productId       String    /// Quel produit
  fromType        String    /// WAREHOUSE, EMPLOYEE_STOCK
  toType          String    /// WAREHOUSE, EMPLOYEE_STOCK
  fromId          String    /// ID de la source (warehouseId ou employeeId)
  toId            String    /// ID de la destination
  quantity        Int       /// Quantit√© demand√©e
  status          String    @default("PENDING") /// PENDING, APPROVED, IN_TRANSIT, COMPLETED, REJECTED
  urgencyLevel    String    @default("MEDIUM") /// LOW, MEDIUM, HIGH
  requestedBy     String    /// Qui a fait la demande
  approvedBy      String?   /// Qui a approuv√© (si applicable)
  rejectedBy      String?   /// Qui a rejet√© (si applicable)
  rejectionReason String?   /// Motif de refus (obligatoire si rejet√©)
  reason          String?   /// Motif de la demande
  reference       String?   /// R√©f√©rence externe
  expiresAt       DateTime? /// Date d'expiration de la requ√™te
  organizationId  String    /// Isolation multi-tenant
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  product      Product      @relation("RequestProduct", fields: [productId], references: [id])
  requester    User         @relation("RequestedBy", fields: [requestedBy], references: [id])
  approver     User?        @relation("ApprovedBy", fields: [approvedBy], references: [id])
  rejecter     User?        @relation("RejectedBy", fields: [rejectedBy], references: [id])
  organization Organization @relation("RequestOrg", fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("stock_movement_requests")
}

/// üîÑ RETOUR DE PRODUIT - Gestion des retours clients avec r√©int√©gration stock
/// Permet de tracer les retours et leur r√©int√©gration dans le stock employ√©
model StockReturn {
  id             String   @id @default(cuid())
  productId      String   /// Quel produit retourn√©
  employeeId     String   /// Employ√© qui traite le retour
  customerId     String?  /// Client qui retourne (optionnel)
  quantity       Int      /// Quantit√© retourn√©e
  returnReason   String   /// Motif du retour (d√©faut, erreur commande, etc.)
  status         String   @default("RECEIVED") /// RECEIVED, INSPECTED, RESTOCKED, DAMAGED, RETURNED_TO_WAREHOUSE
  condition      String   @default("GOOD") /// GOOD, DAMAGED, DEFECTIVE
  saleId         String?  /// Vente d'origine (si applicable)
  notes          String?  /// Notes additionnelles
  organizationId String   /// Isolation multi-tenant
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  product      Product      @relation("ReturnProduct", fields: [productId], references: [id])
  employee     User         @relation("ReturnEmployee", fields: [employeeId], references: [id])
  customer     Customer?    @relation("ReturnCustomer", fields: [customerId], references: [id])
  sale         Sale?        @relation("ReturnSale", fields: [saleId], references: [id])
  organization Organization @relation("ReturnOrg", fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("stock_returns")
}

// ========================================
// üë• GESTION DE LA CLIENT√àLE
// ========================================

/// üë§ CLIENT - Base clients de l'organisation
/// Les clients peuvent √™tre globaux (toutes boutiques) ou sp√©cifiques selon la strat√©gie
model Customer {
  id             String   @id @default(cuid())
  name           String /// Nom/Raison sociale du client
  email          String? /// Email de contact
  phone          String? /// T√©l√©phone
  address        String? /// Adresse de facturation/livraison
  type           String   @default("INDIVIDUAL") /// INDIVIDUAL, COMPANY, VIP
  organizationId String /// Appartient √† quelle organisation
  active         Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sales        Sale[] /// Historique des achats
  stockReturns StockReturn[] @relation("ReturnCustomer") /// Retours effectu√©s

  @@map("customers")
}

// ========================================
// üí∞ GESTION DES VENTES (MULTI-BOUTIQUES)
// ========================================

/// üõí VENTE - Transaction de vente dans une boutique
/// Chaque vente est li√©e √† une boutique sp√©cifique pour le reporting par point de vente
model Sale {
  id             String    @id @default(cuid())
  customerId     String? /// Client (peut √™tre null pour vente comptoir)
  storeId        String /// Dans quelle boutique cette vente a eu lieu
  totalAmount    Decimal   @db.Decimal(10, 2) /// Montant total TTC
  paidAmount     Decimal   @default(0) @db.Decimal(10, 2) /// Montant d√©j√† pay√©
  status         String    @default("PENDING") /// PENDING, PAID, PARTIAL, CANCELLED, REFUNDED
  saleDate       DateTime  @default(now()) /// Date de la vente
  dueDate        DateTime? /// Date d'√©ch√©ance (pour cr√©dit)
  userId         String /// Vendeur qui a effectu√© la vente
  organizationId String /// Isolation multi-tenant
  createdAt      DateTime  @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  customer     Customer?    @relation(fields: [customerId], references: [id])
  store        Store        @relation(fields: [storeId], references: [id]) /// Boutique de vente
  user         User         @relation(fields: [userId], references: [id]) /// Vendeur
  items        SaleItem[] /// Lignes de d√©tail de la vente
  stockReturns StockReturn[] @relation("ReturnSale") /// Retours li√©s √† cette vente

  @@map("sales")
}

/// üõí LIGNE DE VENTE - D√©tail produit vendu
model SaleItem {
  id          String  @id @default(cuid())
  saleId      String /// √Ä quelle vente appartient cette ligne
  productId   String /// Quel produit vendu
  quantity    Int /// Quantit√© vendue
  unitPrice   Decimal @db.Decimal(10, 2) /// Prix unitaire au moment de la vente
  discount    Decimal @default(0) @db.Decimal(5, 2) /// Remise appliqu√©e (en %)
  totalAmount Decimal @db.Decimal(10, 2) /// Montant total de cette ligne

  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

// ========================================
// üõí GESTION DES ACHATS & APPROVISIONNEMENTS
// ========================================

/// üìã COMMANDE D'ACHAT - Commandes pass√©es aux fournisseurs
/// Permet de g√©rer les approvisionnements et r√©ceptions d'entrep√¥t
model PurchaseOrder {
  id             String    @id @default(cuid())
  supplierId     String /// Fournisseur concern√©
  warehouseId    String /// Entrep√¥t de destination
  orderDate      DateTime  @default(now()) /// Date de commande
  expectedDate   DateTime? /// Date de livraison pr√©vue
  status         String    @default("PENDING") /// PENDING, CONFIRMED, SHIPPED, RECEIVED, CANCELLED
  totalAmount    Decimal   @db.Decimal(10, 2) /// Montant total de la commande
  userId         String /// Qui a cr√©√© cette commande
  organizationId String /// Isolation multi-tenant

  organization Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  supplier     Supplier            @relation(fields: [supplierId], references: [id])
  warehouse    Warehouse           @relation(fields: [warehouseId], references: [id])
  user         User                @relation(fields: [userId], references: [id])
  items        PurchaseOrderItem[] /// Lignes de la commande

  @@map("purchase_orders")
}

/// üì¶ LIGNE DE COMMANDE D'ACHAT - D√©tail par produit
model PurchaseOrderItem {
  id               String  @id @default(cuid())
  purchaseOrderId  String /// √Ä quelle commande appartient cette ligne
  productId        String /// Quel produit command√©
  quantity         Int /// Quantit√© command√©e
  unitPrice        Decimal @db.Decimal(10, 2) /// Prix unitaire n√©goci√©
  receivedQuantity Int     @default(0) /// Quantit√© d√©j√† re√ßue
  totalAmount      Decimal @db.Decimal(10, 2) /// Montant total ligne

  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product       Product       @relation(fields: [productId], references: [id])

  @@map("purchase_order_items")
}

// ========================================
// üîî NOTIFICATIONS & ALERTES SYST√àME
// ========================================

/// üîî NOTIFICATION - Alertes et informations utilisateur
/// Syst√®me de notification pour stocks bas, ventes importantes, etc.
model Notification {
  id             String   @id @default(cuid())
  userId         String /// Destinataire de la notification
  organizationId String /// Contexte organisationnel
  type           String /// system, alert, info, create
  title          String /// Titre court de la notification
  message        String /// Message d√©taill√©
  read           Boolean  @default(false) /// Lu ou non lu
  priority       String   @default("MEDIUM") /// LOW, MEDIUM, HIGH, CRITICAL
  persistent     Boolean  @default(false) /// Reste jusqu'√† lecture
  actionRequired Boolean  @default(false) /// N√©cessite une action
  relatedEntity  String? /// Type d'entit√© li√©e (stock_movement, purchase_order, etc.)
  relatedId      String? /// ID de l'entit√© li√©e
  createdAt      DateTime @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// ========================================
// üîç AUDIT & TRA√áABILIT√â COMPL√àTE
// ========================================

/// üìã JOURNAL D'AUDIT - Tra√ßabilit√© de toutes les actions
/// Enregistre qui a fait quoi, quand, avec quels r√©sultats
model AuditLog {
  id          String   @id @default(cuid())
  userId      String? /// Utilisateur qui a effectu√© l'action (null si syst√®me)
  action      String /// CREATE, UPDATE, DELETE, LOGIN, LOGOUT, STOCK_MOVEMENT
  resource    String /// Table/Entit√© concern√©e (users, products, sales, etc.)
  resourceId  String /// ID de l'enregistrement modifi√©
  oldValues   String? /// JSON des valeurs avant modification
  newValues   String? /// JSON des nouvelles valeurs
  ipAddress   String? /// Adresse IP de l'utilisateur
  userAgent   String? /// Navigateur/appareil utilis√©
  timestamp   DateTime @default(now())
  result      String? /// SUCCESS, FAILED, PARTIAL
  description String? /// Description d√©taill√©e de l'action

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("audit_logs")
}