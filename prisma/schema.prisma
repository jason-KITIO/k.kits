generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== MODÃˆLES EXISTANTS ==========

model User {
  id                      String    @id @default(cuid())
  email                   String    @unique
  username                String?   @unique
  passwordHash            String
  firstName               String?
  lastName                String?
  phone                   String?   @unique
  profileImageUrl         String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  lastSignInAt            DateTime?
  emailVerified           Boolean   @default(false)
  phoneVerified           Boolean   @default(false)
  twoFactorEnabled        Boolean   @default(false)
  banned                  Boolean   @default(false)
  resetToken              String?
  resetTokenExpiry        DateTime?
  verificationToken       String?
  verificationTokenExpiry DateTime?

  // Relations existantes
  sessions            UserSession[]
  roles               UserRole[]
  twoFactorAuth       TwoFactorAuth?
  loginAttempts       LoginAttempt[]
  auditLogs           AuditLog[]
  organizationMembers OrganizationMember[]
}

model UserSession {
  id           String    @id @default(cuid())
  userId       String
  sessionToken String    @unique
  refreshToken String?   @unique
  deviceInfo   String?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime  @default(now())
  lastActiveAt DateTime?
  expiresAt    DateTime?
  active       Boolean   @default(true)
  location     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userRoles          UserRole[]
  rolePermissions    RolePermission[]
  OrganizationRole   OrganizationRole[]
  Invitation         Invitation[]
  OrganizationMember OrganizationMember[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  resource    String
  action      String
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())

  rolePermissions RolePermission[]
}

model UserRole {
  id             String    @id @default(cuid())
  userId         String
  roleId         String
  assignedAt     DateTime  @default(now())
  expiresAt      DateTime?
  assignedBy     String?
  active         Boolean   @default(true)
  organizationId String

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role         Role         @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RolePermission {
  id           String   @id @default(cuid())
  roleId       String
  permissionId String
  assignedAt   DateTime @default(now())
  assignedBy   String?
  active       Boolean  @default(true)

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  domain      String?
  logo        String?
  address     String?
  phone       String?
  email       String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?

  // Relations existantes
  members          OrganizationMember[]
  invitations      Invitation[]
  UserRole         UserRole[]
  OrganizationRole OrganizationRole[]
}

model OrganizationMember {
  id             String    @id @default(cuid())
  userId         String
  organizationId String
  joinedAt       DateTime  @default(now())
  leftAt         DateTime?
  active         Boolean   @default(true)
  invitedBy      String?
  roleId         String
  createdAt      DateTime  @default(now())

  role         Role         @relation(fields: [roleId], references: [id])
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model OrganizationRole {
  id             String @id @default(cuid())
  roleId         String
  organizationId String

  role         Role         @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Invitation {
  id             String   @id @default(cuid())
  organizationId String
  email          String
  roleId         String
  invitedBy      String?
  createdAt      DateTime @default(now())
  expiresAt      DateTime
  status         String
  token          String   @unique

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role         Role         @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  action      String
  resource    String
  resourceId  String
  oldValues   String?
  newValues   String?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())
  result      String?
  description String?

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model LoginAttempt {
  id            String   @id @default(cuid())
  email         String
  ipAddress     String?
  userAgent     String?
  successful    Boolean
  failureReason String?
  attemptedAt   DateTime @default(now())
  location      String?

  user User? @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Cascade)
}

model TwoFactorAuth {
  id          String    @id @default(cuid())
  userId      String    @unique
  secret      String
  enabled     Boolean   @default(false)
  backupCodes String?
  enabledAt   DateTime?
  lastUsedAt  DateTime?
  method      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
